<?xml version="1.0" encoding="UTF-8"?>
<!--!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"-->
<!-- 에러가 나니 dtd 파일을 직접 넣자 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">

<!-- cpp의 namespace와 동일한 기능. 유일해야 중복 방지 가능 -->
<!-- DTO경로(domain.DTO)로 생성 -->
<!-- mapper namespace="com.sds.model2app.domain.Board" -->
<mapper namespace="Board">

	<!-- insert 쿼리 -->
	<!-- parameterType에는 데이터가 채워진 DTO가 전달됨 -->
	<!-- #{변수명} 내부의 변수명은 반드시 DTO 내부의 멤버변수를 적어야 함 -->
	<!-- xml은 프로그래밍 언어가 아니기에 java언어에서 이 xml을 접근해야하기에 접근 id가 부여되어 있어야 함 -->
	<!-- insert id="insert" parameterType="com.sds.model2app.domain.Board" -->
	<insert id="insert" parameterType="Board">
		insert into board(title, writer, content) values(#{title}, #{writer}, #{content})
	</insert>
	
	<!-- 모든 레코드 가져오기 -->
	<!-- resultType: select문에 의해 가져온 컬럼값(한 건 기준)을 어떤 자바 자료형(DTO)에 담아야 할 지 결정 -->
	<!-- 개발자가 rs의 레코드를 자바의 DTO에 담는(mapping) 과정을 대신 해준다: SQL Mapper -->
	<select id="selectAll" resultType="Board">
		select * from board order by board_idx desc
	</select>

	<!-- 한 건 가져오기 -->
	<select id="select" parameterType="int" resultType="Board">
		select * from board where board_idx=#{board_idx}
	</select>
	
	<!-- 한 건 수정하기 -->
	<update id="update" parameterType="Board">
		update board set title=#{title}, writer=#{writer}, content=#{content}
		where board_idx=#{board_idx}
	</update>
	
	<!-- 한 건 삭제하기 -->
	<delete id="delete" parameterType="int">
		delete from board where board_idx=#{board_idx}
	</delete>

</mapper>