<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<context:component-scan base-package="com.sds.mall.model"/>
	
	<!-- 
		지난번 프로젝트 Spring에서 mybatis나 hibernate 또는 JDBC를 이용할 때 DB 커넥션은 개발자가 주도
		EJB나 Spring은 트랜젝션, 보안처리 등을 개발자가 일일히 처리하지 않기 위함이기에
		금일부터는 어떠한 퍼시스턴스(DB연동)영역의 기술을 사용하던 Spring이 DB 연동을 주도하도록 하여 자동으로 트랜젝션, 보안 처리등을 꾀한다
	-->
	
	<!-- Spring이 JDNI를 접근하도록 한다: namespace jee 추가 -->
	<!-- resource-ref="true": java:comp/env 접두어 사용 -->
	<jee:jndi-lookup 
		id="dataSource"
		jndi-name="jndi/mysql"
		resource-ref="true"
	/>
	
	<!-- 
		데이터베이스를 Spring이 취득하였으므로 어떤 퍼시스턴스 기술(Hibernate, Mybatis, JPA)을 사용하던 Spring이 알아서 트랜젝션을 처리
		개발자가 사용하는 기술에 따라 어떠한 트랜젝션 처리 bean을 사용할 지 명시 필요
		ex) JDBC: DataSourceTransactionManager bean 등록
			Mybatis: DataSourceTransactionManager bean 등록 (내부적으로 JDBC 사용)
			Hibernate: HibernateTransactionManager bean 등록
		
		Mybatis 이용의 경우) 다음과 같은 의존성 필요
			Spring JDBC
			Mybatis Spring
			
		트랜젝션 매니저는 어떤 DB를 연동하고 있는지 알아야 하기에 위 dataSource를 주입
	-->
	<bean id="dataSourceTransactionManager" 
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource"/>
	<!-- 
	<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager"/>
		<property name="dataSource" ref="dataSource"/> 
	</bean> 를 namespace : p 속성 이용하여 줄여쓰기		
	-->

	<!-- 그냥 Mybatis에서는 SqlSession을 모아 놓은 팩토리객체가 SqlSessionFactory 였다면
		MybatisSpring에서는 SqlSession의 명칭: SqlSessionTemplete로 변경
						  SqlSessionFactory: SqlSessionFactoryBean으로 변경
	-->
	<bean id="sqlSessionFactoryBean" 
		class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource"
		p:configLocation="classpath:/com/sds/mall/mybatis/mybatis-config.xml"/>
		
	<!-- DAO가 쿼리문 수행 시 필요한 객체인 SqlSessionTemplete를 등록 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactoryBean"/>
	</bean>
	
	<!-- 파일 업로드를 위한 bean 설정 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:maxUploadSize="1048576"/>
	
	<!-- String도 클래스이기에 bean 등록 가능 -->
	<bean id="savePath" class="java.lang.String">
		<constructor-arg value="/resources/product_img/"/>
	</bean>
	
	<!-- 어노테이션 기반 스프링 트랜젝션 활성화: namespace에서 tx 추가 -->
	<!-- 이 태그 등록 이후부터는 서비스 객체의 원하는 메서드에 @Transactional 어느테이션 부착 -->
	<!-- 개발자가 현재 사용하는 기술에 따른 트랜젝션 매니저를 주입 -->
	<tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>



	<!-- 하위 컨트롤러가 View 이름을 DispatcherServlet에게 반환하면 반환된 이름을 이용하여 완전한 JSP 경로를 만들어주는 ViewResolver 객체 등록 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/WEB-INF/"
		p:suffix=".jsp"/>
	
	<!-- 
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/"/>
		<property name="suffix" value=".jsp"/>
	</bean>
	 -->



</beans>
