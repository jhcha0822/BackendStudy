<?xml version="1.0" encoding="UTF-8"?>
<!-- 정적 자원(WEB-INF 이외의 영역)에 접근하기 위해서는 namespace:mvc 추가 필요 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	

	<!-- 지정한 패키지를 검색하여 스프링이 이해하는 컴포넌트 어노테이션이 붙은 클래스들을 인스턴스화 시킴 -->
	<!-- @Controller(하위 컨트롤러), @Repository(DAO), @Service(서비스) -->
	<!-- @Component: 비정형 객체 등록 -->
	<context:component-scan base-package="com.sds.mall.client.controller"/>

	<!-- 아래의 태그를 먼저 등록해야 mbc 기반의 기능들을 사용할 수 있다 -->
	<mvc:annotation-driven/>

	<!-- SpringMVC에서는 모든 요청을 하나의 진입점인 DispatcherServlet이 받기 때문에, 이 서블릿이 정적 자원들의 위치를 알기 위해서는 아래의 resources 태그가 등록되어야 한다 -->	
	<mvc:resources location="/resources/" mapping="/static/**"/>
	
	
	<!-- Namespace AOP 활성화 -->
	<!-- 쇼핑몰 하위 컨트롤러 동작시 관려할 AOP 설정 -->
	<bean id="topCategoryAspect" class="com.sds.mall.aop.TopCategoryAspect" />
	<aop:config>
		<!-- 누구를 Aspect로 정의했는지 명시 -->
		<aop:aspect ref="topCategoryAspect">
			<!-- 어느 지점에서 관여할지 명시 -->
			<!-- Aspect가 관여할 여러 부호가 되는 지점을 join point라 한다 -->
			<!-- join point 중 선택된 것을 point-cut라 함 -->
			<!-- Spring은 AOP를 자체적으로 구현하지 않고 기존 AspectJ 라이브러리를 이용 -->
			<!--                                                              ..: 모든 클래스, *: 모든 메서드, (..): 모든 매개변수-->
			<aop:pointcut expression="execution(public * com.sds.mall.client.controller..*(..))" id="topCategoryPointCut"/>
			
			<!-- 어느 시점에 Aspect의 어떤 메서드가 관여할 지 결정 -->
			<aop:around method="getTopCategoryList" pointcut-ref="topCategoryPointCut"/>
			
		</aop:aspect>
	</aop:config>
	
</beans>
