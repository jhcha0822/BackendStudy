SQL> -- 제약조건: 컬럼에 가하는 제한사항
SQL> -- 무결한 데이터만 허용하기 위해 사용
SQL> -- 중복을 허용하지 않는 제약조건: UNIQUE
SQL> -- NULL을 허용하지 않는 제약조건: NOT NULL
SQL> -- 기본값을 입력: DEFAULT
SQL> -- 조건으로 지정된 값만 허용하는 제약조건: CHECK
SQL> -- UNIQUE가 NULL을 허용하기 때문에, UNIQUE+NOT NULL 기능을 하는 제약조건: PRIMARY KEY
SQL> SHOW USER
USER is "SYSTEM"
SQL> CONN WENDY/1234
Connected.
SQL> -- 현재 접속한 유저가 보유한 테이블 목록 보기
SQL> -- 딕셔너리 활용
SQL> DESC USER_TABLES;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 TABLE_NAME                                NOT NULL VARCHAR2(30)
 TABLESPACE_NAME                                    VARCHAR2(30)
 CLUSTER_NAME                                       VARCHAR2(30)
 IOT_NAME                                           VARCHAR2(30)
 STATUS                                             VARCHAR2(8)
 PCT_FREE                                           NUMBER
 PCT_USED                                           NUMBER
 INI_TRANS                                          NUMBER
 MAX_TRANS                                          NUMBER
 INITIAL_EXTENT                                     NUMBER
 NEXT_EXTENT                                        NUMBER
 MIN_EXTENTS                                        NUMBER
 MAX_EXTENTS                                        NUMBER
 PCT_INCREASE                                       NUMBER
 FREELISTS                                          NUMBER
 FREELIST_GROUPS                                    NUMBER
 LOGGING                                            VARCHAR2(3)
 BACKED_UP                                          VARCHAR2(1)
 NUM_ROWS                                           NUMBER
 BLOCKS                                             NUMBER
 EMPTY_BLOCKS                                       NUMBER
 AVG_SPACE                                          NUMBER
 CHAIN_CNT                                          NUMBER
 AVG_ROW_LEN                                        NUMBER
 AVG_SPACE_FREELIST_BLOCKS                          NUMBER
 NUM_FREELIST_BLOCKS                                NUMBER
 DEGREE                                             VARCHAR2(40)
 INSTANCES                                          VARCHAR2(40)
 CACHE                                              VARCHAR2(20)
 TABLE_LOCK                                         VARCHAR2(8)
 SAMPLE_SIZE                                        NUMBER
 LAST_ANALYZED                                      DATE
 PARTITIONED                                        VARCHAR2(3)
 IOT_TYPE                                           VARCHAR2(12)
 TEMPORARY                                          VARCHAR2(1)
 SECONDARY                                          VARCHAR2(1)
 NESTED                                             VARCHAR2(3)
 BUFFER_POOL                                        VARCHAR2(7)
 FLASH_CACHE                                        VARCHAR2(7)
 CELL_FLASH_CACHE                                   VARCHAR2(7)
 ROW_MOVEMENT                                       VARCHAR2(8)
 GLOBAL_STATS                                       VARCHAR2(3)
 USER_STATS                                         VARCHAR2(3)
 DURATION                                           VARCHAR2(15)
 SKIP_CORRUPT                                       VARCHAR2(8)
 MONITORING                                         VARCHAR2(3)
 CLUSTER_OWNER                                      VARCHAR2(30)
 DEPENDENCIES                                       VARCHAR2(8)
 COMPRESSION                                        VARCHAR2(8)
 COMPRESS_FOR                                       VARCHAR2(12)
 DROPPED                                            VARCHAR2(3)
 READ_ONLY                                          VARCHAR2(3)
 SEGMENT_CREATED                                    VARCHAR2(3)
 RESULT_CACHE                                       VARCHAR2(7)

SQL> SELECT TABLE_NAME FROM USER_TABLES;

TABLE_NAME                                                                      
------------------------------------------------------------                    
REDVELVET                                                                       
STREAMER                                                                        
STREAMER2                                                                       
DEPT                                                                            
EMP                                                                             
EMP2                                                                            
MEMBER2                                                                         

7 rows selected.

SQL> -- PRIMARY KEY의 주용도 이해하기
SQL> CREATE TABLE MEMBER3(
  2  ID VARCHAR2(20)
  3  , NAME VARCHAR2(20)
  4  , AGE NUMBER
  5  );

Table created.

SQL> INSERT INTO MEMBER3(ID, NAME, AGE) VALUES('CAT', 'AAA', 3);

1 row created.

SQL> INSERT INTO MEMBER3(ID, NAME, AGE) VALUES('CAT', 'AAA', 3);

1 row created.

SQL> INSERT INTO MEMBER3(ID, NAME, AGE) VALUES('CAT', 'AAA', 3);

1 row created.

SQL> SET LINESIZE 200
SQL> SELECT * FROM MEMBER3
  2  ;

ID                                       NAME                                            AGE                                                                                                            
---------------------------------------- ---------------------------------------- ----------                                                                                                            
CAT                                      AAA                                               3                                                                                                            
CAT                                      AAA                                               3                                                                                                            
CAT                                      AAA                                               3                                                                                                            

SQL> -- 모든 데이터가 중복되어 있는 레코드를 대상으로, 특정 레코드만 골라서 업무를 처리할 수 있는가?
SQL> -- ROWNUM 등을 이용하면 되지만, 불안하므로 사실상 없다.
SQL> -- 해결책) 레코드 간 구분을 위한 컬럼을 존재시키되, 해당 컬럼은 레코드의 유일성을 보장해야 하기 때문에
SQL> -- 이는 중복허용이 되면 안되며 NULL도 없어야 한다.
SQL> -- 즉, PRIMARY KEY 이용
SQL> CREATE TABLE MEMBER4(
  2  MEMBER4_IDX NUMBER PRIMARY KEY
  3  , ID VARCHAR2(20) UNIQUE
  4  , NAME VARCHAR2(20) NOT NULL
  5  , REGDATE DATE DEFAULT SYSDATE
  6  , POINT NUMBER DEFAULT 5000
  7  );

Table created.

SQL> INSERT INTO MEMBER4(MEMBER4_IDX, ID, NAME)
  2  VALUES(1, 'CAT', 'AAA');

1 row created.

SQL> VALUES(1, 'DOG', 'BBB');
SP2-0734: unknown command beginning "VALUES(1, ..." - rest of line ignored.
SQL> VALUES(2, 'DOG', 'BBB');
SP2-0734: unknown command beginning "VALUES(2, ..." - rest of line ignored.
SQL> INSERT INTO MEMBER4(MEMBER4_IDX, ID, NAME)
  2  VALUES(1, 'DOG', 'BBB');
INSERT INTO MEMBER4(MEMBER4_IDX, ID, NAME)
*
ERROR at line 1:
ORA-00001: unique constraint (WENDY.SYS_C007033) violated 


SQL> INSERT INTO MEMBER4(MEMBER4_IDX, ID, NAME)
  2  VALUES(2, 'DOG', 'BBB');

1 row created.

SQL> SHOW * FROM MEMBER3;
SP2-0158: unknown SHOW option "*"
SP2-0158: unknown SHOW option "FROM"
SP2-0158: unknown SHOW option "MEMBER3"
SQL> SELECT * FROM MEMBER3;

ID                                       NAME                                            AGE                                                                                                            
---------------------------------------- ---------------------------------------- ----------                                                                                                            
CAT                                      AAA                                               3                                                                                                            
CAT                                      AAA                                               3                                                                                                            
CAT                                      AAA                                               3                                                                                                            

SQL> SELECT * FROM MEMBER4;

MEMBER4_IDX ID                                       NAME                                     REGDATE       POINT                                                                                       
----------- ---------------------------------------- ---------------------------------------- -------- ----------                                                                                       
          1 CAT                                      AAA                                      24/02/20       5000                                                                                       
          2 DOG                                      BBB                                      24/02/20       5000                                                                                       

SQL> -- 숫자형 PRIMARY KEY 값을 넣을 때는 개발자가 원하는 값을 넣는 것이 아니라
SQL> -- 유일성이 보장되어야 하기에 SEQUENCE를 이용한다.
SQL> -- 오라클 객체 중, 오직 유일한 숫자값만을 관리하는 객체
SQL> CREATE SEQUENCE SEQ_MEMBER4
  2  START WITH 1
  3  INCREMENT BY 1;
CREATE SEQUENCE SEQ_MEMBER4
*
ERROR at line 1:
ORA-01031: insufficient privileges 


SQL> -- SEQUENCE도 권한이 있어야 생성 가능함
SQL> -- 오라클은 보안이 강력하므로, 모든 객체에 대한 예) 테이블, 시퀀스, 뷰 등에 대해
SQL> -- 별도의 권한을 SYSTEM으로부터 받아와야 함
SQL> CONN SYSTEM/1234
Connected.
SQL> SHOW USER
USER is "SYSTEM"
SQL> -- SQL문의 종류는 업무에 따라 3종류로 나뉨
SQL> -- DDL: 데이터 정의어(CREATE, DROP, ALTER: 생성 삭제 변경)
SQL> -- DML: INSERT, UPDATE, DELETE, SELECT
SQL> -- DCL: DATABASE CONTROL LANGUAGE: 권한을 부여하는 GRANT, 뺏는 REVOKE
SQL> GRANT CREATE SEQUENCE TO WENDY;

Grant succeeded.

SQL> -- 모든 권한을 다 부여함(CREATE)
SQL> CONN WENDY/1234
Connected.
SQL> CREATE SEQUENCE SEQ_MEMBER4
  2  START WITH 1
  3  INCREMENT BY 1;

Sequence created.

SQL> -- 현재 계정이 보유한 시퀀스들 조회
SQL> -- 딕셔너리 조회
SQL> -- WENDY 는 일반 계정이므로, USER_ 로 시작하는 딕셔너리 조회
SQL> DESC USER_SEQUENCES;
 Name                                                                                                              Null?    Type
 ----------------------------------------------------------------------------------------------------------------- -------- ----------------------------------------------------------------------------
 SEQUENCE_NAME                                                                                                     NOT NULL VARCHAR2(30)
 MIN_VALUE                                                                                                                  NUMBER
 MAX_VALUE                                                                                                                  NUMBER
 INCREMENT_BY                                                                                                      NOT NULL NUMBER
 CYCLE_FLAG                                                                                                                 VARCHAR2(1)
 ORDER_FLAG                                                                                                                 VARCHAR2(1)
 CACHE_SIZE                                                                                                        NOT NULL NUMBER
 LAST_NUMBER                                                                                                       NOT NULL NUMBER

SQL> -- DESC를 이용하여 컬럼명을 알아냈으니, 해당 컬럼명을 이용한
SQL> -- 레코드를 조회하자
SQL> SELECT SEQUENCE_NAME FROM USER_SEQUENCES;

SEQUENCE_NAME                                                                                                                                                                                           
------------------------------------------------------------                                                                                                                                            
SEQ_MEMBER4                                                                                                                                                                                             

SQL> -- 시퀀스를 이용하여 PK(PRIMARY KEY)값을 넣어보자
SQL> INSERT INTO MEMBER4(MEMBER4_IDX, ID, NAME)
  2  VALUES(SEQ_MEMBER4.NEXTVAL, 'CAT', 'CCC');
INSERT INTO MEMBER4(MEMBER4_IDX, ID, NAME)
*
ERROR at line 1:
ORA-00001: unique constraint (WENDY.SYS_C007033) violated 


SQL> -- 테이블 생성시 PK 꼭 정의하자
SQL> DELETE MEMBER4;

2 rows deleted.

SQL> -- 모든 레코드를 지워 중복문제 해결
SQL> INSERT INTO MEMBER4(MEMBER4_IDX, ID, NAME)
  2  VALUES(SEQ_MEMBER4.NEXTVAL, 'CAT', 'CCC');

1 row created.

SQL> SELECT * FROM MEMBER4;

MEMBER4_IDX ID                                       NAME                                     REGDATE       POINT                                                                                       
----------- ---------------------------------------- ---------------------------------------- -------- ----------                                                                                       
          2 CAT                                      CCC                                      24/02/20       5000                                                                                       

SQL> -- 아까 SEQ_MEMBER4.NEXTVAL을 실행(실패했지만)하여 1이 증가된 상황
SQL> -- 목적이 고유한 번호를 부여하는 것이기에 문제 없다.
SQL> INSERT INTO MEMBER4(MEMBER4_IDX, ID, NAME)
  2  VALUES(SEQ_MEMBER4.NEXTVAL, 'DOG', 'AAA');

1 row created.

SQL> SELECT * FROM MEMBER4;

MEMBER4_IDX ID                                       NAME                                     REGDATE       POINT                                                                                       
----------- ---------------------------------------- ---------------------------------------- -------- ----------                                                                                       
          2 CAT                                      CCC                                      24/02/20       5000                                                                                       
          3 DOG                                      AAA                                      24/02/20       5000                                                                                       

SQL> INSERT INTO MEMBER4(MEMBER4_IDX, ID, NAME)
  2  VALUES(SEQ_MEMBER4.NEXTVAL, 'EAGLE', 'DDD');

1 row created.

SQL> SELECT * FROM MEMBER4;

MEMBER4_IDX ID                                       NAME                                     REGDATE       POINT                                                                                       
----------- ---------------------------------------- ---------------------------------------- -------- ----------                                                                                       
          2 CAT                                      CCC                                      24/02/20       5000                                                                                       
          3 DOG                                      AAA                                      24/02/20       5000                                                                                       
          4 EAGLE                                    DDD                                      24/02/20       5000                                                                                       

SQL> -- 만일 DOG을 지우고 다음 회원을 받는다면 SEQ는 5
SQL> -- 따라서 연속되는 번호는 의미가 없다
SQL> DELETE MEMBER4 WHERE MEMBER4_IDX=3;

1 row deleted.

SQL> SELECT * FROM MEMBER4;

MEMBER4_IDX ID                                       NAME                                     REGDATE       POINT                                                                                       
----------- ---------------------------------------- ---------------------------------------- -------- ----------                                                                                       
          2 CAT                                      CCC                                      24/02/20       5000                                                                                       
          4 EAGLE                                    DDD                                      24/02/20       5000                                                                                       

SQL> INSERT INTO MEMBER4(MEMBER4_IDX, ID, NAME)
  2  VALUES(SEQ_MEMBER4.NEXTVAL, 'DUCK', 'EEE');

1 row created.

SQL> SELECT * FROM MEMBER4;

MEMBER4_IDX ID                                       NAME                                     REGDATE       POINT                                                                                       
----------- ---------------------------------------- ---------------------------------------- -------- ----------                                                                                       
          2 CAT                                      CCC                                      24/02/20       5000                                                                                       
          4 EAGLE                                    DDD                                      24/02/20       5000                                                                                       
          5 DUCK                                     EEE                                      24/02/20       5000                                                                                       

SQL> SPOOL OFF
